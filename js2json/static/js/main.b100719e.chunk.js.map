{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["beautify","require","js","App","props","context","state","jsonEditorValue","jsEditorValue","onChangejsEditor","bind","onChangejsonEditor","onClickButton","onPastejsonEditor","obj","console","log","text","newValue","this","replace","document","body","style","background","myJSONString","split","forEach","element","JSON","stringify","setState","parse","err","className","onClick","mode","theme","onChange","value","name","editorProps","$blockScrolling","width","height","onPaste","wrapEnabled","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4SAOIA,G,kBAAWC,EAAQ,IAAeC,IAEjBC,E,YAEjB,WAAYC,EAAOC,GAAU,IAAD,8BACxB,4CAAMD,EAAOC,KACRC,MAAQ,CACTC,gBAAiB,0BACjBC,cAAe,4BAGnB,EAAKC,iBAAmB,EAAKA,iBAAiBC,KAAtB,gBACxB,EAAKC,mBAAqB,EAAKA,mBAAmBD,KAAxB,gBAC1B,EAAKE,cAAgB,EAAKA,cAAcF,KAAnB,gBACrB,EAAKG,kBAAoB,EAAKA,kBAAkBH,KAAvB,gBAVD,E,+EAaVI,GACdC,QAAQC,IAAI,uBAAyBF,EAAIG,Q,sCAIzC,IAAIC,EAAWC,KAAKb,MAAME,cAG1BU,EAAWA,EAASE,QAAQ,uBAAwB,cAEpDF,GADAA,EAAWlB,EAASkB,IACAE,QAAQ,2BAAsB,UAElDD,KAAKV,iBAAiBS,K,uCAGTA,GACbH,QAAQC,IAAI,oBACZK,SAASC,KAAKC,MAAMC,WAAa,OAEjC,IAAIC,EAAe,IACnBP,EAAWA,EAASE,QAAQ,SAAU,OAChBM,MAAM,MACrBC,SAAQ,SAAUC,GACrBb,QAAQC,IAAI,sBAA6BY,GACzCH,GAAgBI,KAAKC,UAAUF,GAC/BH,GAAgB,SAGpBA,EAAeA,EAAaL,QAAQ,SAAU,IAE9CD,KAAKY,SAAS,CACVvB,cAAeU,EACfX,gBAAiBkB,M,yCAINP,GACfG,SAASC,KAAKC,MAAMC,WAAa,OAEjC,IAAIC,EAAe,GACNP,EAASQ,MAAM,MAErBC,SAAQ,SAAUC,GAKrBA,GADAA,GADAA,GADAA,GADAA,EAAUA,EAAQR,QAAQ,eAAgB,KACxBA,QAAQ,OAAQ,KAChBA,QAAQ,OAAQ,KAChBA,QAAQ,OAAQ,KAChBA,QAAQ,OAAQ,IAElCK,GADAG,GAAW,YAIfH,EAAe,IAAMA,EAAe,IACpCV,QAAQC,IAAI,wBAA0BS,GAEtC,IACIA,EAAeI,KAAKG,MAAMP,GAC1BN,KAAKY,SAAS,CACVxB,gBAAiBW,EACjBV,cAAeiB,IAGvB,MAAOQ,GACHd,KAAKY,SAAS,CACVxB,gBAAiBW,IAErBG,SAASC,KAAKC,MAAMC,WAAa,Y,+BAMrC,OACI,yBAAKU,UAAU,aACX,yBAAKA,UAAU,UACX,kBAAC,IAAD,CAAQC,QAAShB,KAAKP,eAAtB,MAIJ,yBAAKsB,UAAU,YACX,kBAAC,IAAD,CACIE,KAAK,aACLC,MAAM,SACNC,SAAUnB,KAAKV,iBACf8B,MAAOpB,KAAKb,MAAME,cAClBgC,KAAK,cACLC,YAAa,CAAEC,iBAAiB,GAChCnB,MAAO,CAAEoB,MAAO,QAASC,OAAQ,YAGzC,yBAAKV,UAAU,cACX,kBAAC,IAAD,CACIE,KAAK,aACLC,MAAM,SACNC,SAAUnB,KAAKR,mBACfkC,QAAS1B,KAAKN,kBACd2B,KAAK,gBACLC,YAAa,CAAEC,iBAAiB,GAChCH,MAAOpB,KAAKb,MAAMC,gBAClBuC,aAAa,EACbvB,MAAO,CAAEoB,MAAO,QAASC,OAAQ,iB,GAnHxBG,IAAMC,WCGnBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASlC,SAASmC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.b100719e.chunk.js","sourcesContent":["import React from 'react';\r\nimport AceEditor from \"react-ace\";\r\nimport Button from 'simple-react-button';\r\nimport './App.css';\r\n\r\nimport \"ace-builds/src-noconflict/mode-javascript\";\r\nimport \"ace-builds/src-noconflict/theme-github\";\r\nvar beautify = require('js-beautify').js;\r\n\r\nexport default class App extends React.Component {\r\n\r\n    constructor(props, context) {\r\n        super(props, context);\r\n        this.state = {\r\n            jsonEditorValue: 'Coller le webscript ICI',\r\n            jsEditorValue: 'Coller le javascript ICI'\r\n        }\r\n\r\n        this.onChangejsEditor = this.onChangejsEditor.bind(this);\r\n        this.onChangejsonEditor = this.onChangejsonEditor.bind(this);\r\n        this.onClickButton = this.onClickButton.bind(this);\r\n        this.onPastejsonEditor = this.onPastejsonEditor.bind(this);\r\n    }\r\n\r\n    onPastejsonEditor(obj) {\r\n        console.log('onPastejsonEditor:\\n' + obj.text);\r\n    }\r\n\r\n    onClickButton() {\r\n        var newValue = this.state.jsEditorValue;\r\n\r\n        // on traite les accolades des variables pour éviter une mauvaise indentation\r\n        newValue = newValue.replace(/{{([A-Za-z0-9]*)}}/gm, \"¤$1£\");\r\n        newValue = beautify(newValue);\r\n        newValue = newValue.replace(/¤([A-Za-z0-9]*)£/gm, \"{{$1}}\");\r\n\r\n        this.onChangejsEditor(newValue);\r\n    }\r\n\r\n    onChangejsEditor(newValue) {\r\n        console.log('change jsEditor ');\r\n        document.body.style.background = 'grey';\r\n\r\n        var myJSONString = '';\r\n        newValue = newValue.replace(/\\r\\n/gm, '\\n');\r\n        var array1 = newValue.split('\\n');\r\n        array1.forEach(function (element) {\r\n            console.log('onChangejsEditor:' + \"\\n\" + element);\r\n            myJSONString += JSON.stringify(element);\r\n            myJSONString += \",\\n\"\r\n        });\r\n\r\n        myJSONString = myJSONString.replace(/,\\n$/gm, '');\r\n\r\n        this.setState({\r\n            jsEditorValue: newValue,\r\n            jsonEditorValue: myJSONString\r\n        });\r\n    }\r\n\r\n    onChangejsonEditor(newValue) {\r\n        document.body.style.background = 'grey';\r\n\r\n        var myJSONString = '';\r\n        var array1 = newValue.split('\\n');\r\n\r\n        array1.forEach(function (element) {\r\n            element = element.replace(/^[\\t,\\ ]*\"/gm, '');\r\n            element = element.replace(/,$/gm, '');\r\n            element = element.replace(/\"$/gm, '');\r\n            element = element.replace(/\\r/gm, '');\r\n            element = element.replace(/\\n/gm, '');\r\n            element += '\\\\r\\\\n';\r\n            myJSONString += element;\r\n        });\r\n\r\n        myJSONString = '\"' + myJSONString + '\"';\r\n        console.log('onChangejsonEditor:\\n' + myJSONString);\r\n\r\n        try {\r\n            myJSONString = JSON.parse(myJSONString);\r\n            this.setState({\r\n                jsonEditorValue: newValue,\r\n                jsEditorValue: myJSONString\r\n            });\r\n        }\r\n        catch (err) {\r\n            this.setState({\r\n                jsonEditorValue: newValue\r\n            });\r\n            document.body.style.background = 'orange';\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"button\">\r\n                    <Button onClick={this.onClickButton}>\r\n                        F\r\n                    </Button>\r\n                </div>\r\n                <div className=\"jsEditor\">\r\n                    <AceEditor\r\n                        mode=\"javascript\"\r\n                        theme=\"github\"\r\n                        onChange={this.onChangejsEditor}\r\n                        value={this.state.jsEditorValue}\r\n                        name=\"jsAceEditor\"\r\n                        editorProps={{ $blockScrolling: true }}\r\n                        style={{ width: '740px', height: '500px' }}\r\n                    />\r\n                </div>\r\n                <div className=\"jsonEditor\">\r\n                    <AceEditor\r\n                        mode=\"javascript\"\r\n                        theme=\"github\"\r\n                        onChange={this.onChangejsonEditor}\r\n                        onPaste={this.onPastejsonEditor}\r\n                        name=\"jsonAceEditor\"\r\n                        editorProps={{ $blockScrolling: true }}\r\n                        value={this.state.jsonEditorValue}\r\n                        wrapEnabled={false}\r\n                        style={{ width: '740px', height: '500px' }}\r\n                    />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}